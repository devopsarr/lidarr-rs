/*
 * Lidarr
 *
 * Lidarr API docs
 *
 * The version of the OpenAPI document: v2.13.3.4711
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParsedAlbumInfo {
    #[serde(rename = "releaseTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_title: Option<Option<String>>,
    #[serde(rename = "albumTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub album_title: Option<Option<String>>,
    #[serde(rename = "artistName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub artist_name: Option<Option<String>>,
    #[serde(rename = "albumType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub album_type: Option<Option<String>>,
    #[serde(rename = "artistTitleInfo", skip_serializing_if = "Option::is_none")]
    pub artist_title_info: Option<Box<models::ArtistTitleInfo>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "releaseDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<Option<String>>,
    #[serde(rename = "discography", skip_serializing_if = "Option::is_none")]
    pub discography: Option<bool>,
    #[serde(rename = "discographyStart", skip_serializing_if = "Option::is_none")]
    pub discography_start: Option<i32>,
    #[serde(rename = "discographyEnd", skip_serializing_if = "Option::is_none")]
    pub discography_end: Option<i32>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "releaseHash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_hash: Option<Option<String>>,
    #[serde(rename = "releaseVersion", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_version: Option<Option<String>>,
}

impl ParsedAlbumInfo {
    pub fn new() -> ParsedAlbumInfo {
        ParsedAlbumInfo {
            release_title: None,
            album_title: None,
            artist_name: None,
            album_type: None,
            artist_title_info: None,
            quality: None,
            release_date: None,
            discography: None,
            discography_start: None,
            discography_end: None,
            release_group: None,
            release_hash: None,
            release_version: None,
        }
    }
}

