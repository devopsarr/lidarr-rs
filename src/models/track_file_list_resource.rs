/*
 * Lidarr
 *
 * Lidarr API docs
 *
 * The version of the OpenAPI document: v2.13.3.4711
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackFileListResource {
    #[serde(rename = "trackFileIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub track_file_ids: Option<Option<Vec<i32>>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "sceneName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scene_name: Option<Option<String>>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
}

impl TrackFileListResource {
    pub fn new() -> TrackFileListResource {
        TrackFileListResource {
            track_file_ids: None,
            quality: None,
            scene_name: None,
            release_group: None,
        }
    }
}

