/*
 * Lidarr
 *
 * Lidarr API docs
 *
 * The version of the OpenAPI document: v2.9.6.4552
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlbumResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "disambiguation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub disambiguation: Option<Option<String>>,
    #[serde(rename = "overview", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub overview: Option<Option<String>>,
    #[serde(rename = "artistId", skip_serializing_if = "Option::is_none")]
    pub artist_id: Option<i32>,
    #[serde(rename = "foreignAlbumId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub foreign_album_id: Option<Option<String>>,
    #[serde(rename = "monitored", skip_serializing_if = "Option::is_none")]
    pub monitored: Option<bool>,
    #[serde(rename = "anyReleaseOk", skip_serializing_if = "Option::is_none")]
    pub any_release_ok: Option<bool>,
    #[serde(rename = "profileId", skip_serializing_if = "Option::is_none")]
    pub profile_id: Option<i32>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(rename = "albumType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub album_type: Option<Option<String>>,
    #[serde(rename = "secondaryTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secondary_types: Option<Option<Vec<String>>>,
    #[serde(rename = "mediumCount", skip_serializing_if = "Option::is_none")]
    pub medium_count: Option<i32>,
    #[serde(rename = "ratings", skip_serializing_if = "Option::is_none")]
    pub ratings: Option<Box<models::Ratings>>,
    #[serde(rename = "releaseDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<Option<String>>,
    #[serde(rename = "releases", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub releases: Option<Option<Vec<models::AlbumReleaseResource>>>,
    #[serde(rename = "genres", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Option<Vec<String>>>,
    #[serde(rename = "media", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media: Option<Option<Vec<models::MediumResource>>>,
    #[serde(rename = "artist", skip_serializing_if = "Option::is_none")]
    pub artist: Option<Box<models::ArtistResource>>,
    #[serde(rename = "images", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub images: Option<Option<Vec<models::MediaCover>>>,
    #[serde(rename = "links", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub links: Option<Option<Vec<models::Links>>>,
    #[serde(rename = "lastSearchTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_search_time: Option<Option<String>>,
    #[serde(rename = "statistics", skip_serializing_if = "Option::is_none")]
    pub statistics: Option<Box<models::AlbumStatisticsResource>>,
    #[serde(rename = "addOptions", skip_serializing_if = "Option::is_none")]
    pub add_options: Option<Box<models::AddAlbumOptions>>,
    #[serde(rename = "remoteCover", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub remote_cover: Option<Option<String>>,
}

impl AlbumResource {
    pub fn new() -> AlbumResource {
        AlbumResource {
            id: None,
            title: None,
            disambiguation: None,
            overview: None,
            artist_id: None,
            foreign_album_id: None,
            monitored: None,
            any_release_ok: None,
            profile_id: None,
            duration: None,
            album_type: None,
            secondary_types: None,
            medium_count: None,
            ratings: None,
            release_date: None,
            releases: None,
            genres: None,
            media: None,
            artist: None,
            images: None,
            links: None,
            last_search_time: None,
            statistics: None,
            add_options: None,
            remote_cover: None,
        }
    }
}

