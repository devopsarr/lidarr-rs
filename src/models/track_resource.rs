/*
 * Lidarr
 *
 * Lidarr API docs
 *
 * The version of the OpenAPI document: v2.13.3.4711
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "artistId", skip_serializing_if = "Option::is_none")]
    pub artist_id: Option<i32>,
    #[serde(rename = "foreignTrackId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub foreign_track_id: Option<Option<String>>,
    #[serde(rename = "foreignRecordingId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub foreign_recording_id: Option<Option<String>>,
    #[serde(rename = "trackFileId", skip_serializing_if = "Option::is_none")]
    pub track_file_id: Option<i32>,
    #[serde(rename = "albumId", skip_serializing_if = "Option::is_none")]
    pub album_id: Option<i32>,
    #[serde(rename = "explicit", skip_serializing_if = "Option::is_none")]
    pub explicit: Option<bool>,
    #[serde(rename = "absoluteTrackNumber", skip_serializing_if = "Option::is_none")]
    pub absolute_track_number: Option<i32>,
    #[serde(rename = "trackNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub track_number: Option<Option<String>>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(rename = "trackFile", skip_serializing_if = "Option::is_none")]
    pub track_file: Option<Box<models::TrackFileResource>>,
    #[serde(rename = "mediumNumber", skip_serializing_if = "Option::is_none")]
    pub medium_number: Option<i32>,
    #[serde(rename = "hasFile", skip_serializing_if = "Option::is_none")]
    pub has_file: Option<bool>,
    #[serde(rename = "artist", skip_serializing_if = "Option::is_none")]
    pub artist: Option<Box<models::ArtistResource>>,
    #[serde(rename = "ratings", skip_serializing_if = "Option::is_none")]
    pub ratings: Option<Box<models::Ratings>>,
}

impl TrackResource {
    pub fn new() -> TrackResource {
        TrackResource {
            id: None,
            artist_id: None,
            foreign_track_id: None,
            foreign_recording_id: None,
            track_file_id: None,
            album_id: None,
            explicit: None,
            absolute_track_number: None,
            track_number: None,
            title: None,
            duration: None,
            track_file: None,
            medium_number: None,
            has_file: None,
            artist: None,
            ratings: None,
        }
    }
}

