/*
 * Lidarr
 *
 * Lidarr API docs
 *
 * The version of the OpenAPI document: v2.9.6.4552
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityHistoryEventType {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "grabbed")]
    Grabbed,
    #[serde(rename = "artistFolderImported")]
    ArtistFolderImported,
    #[serde(rename = "trackFileImported")]
    TrackFileImported,
    #[serde(rename = "downloadFailed")]
    DownloadFailed,
    #[serde(rename = "trackFileDeleted")]
    TrackFileDeleted,
    #[serde(rename = "trackFileRenamed")]
    TrackFileRenamed,
    #[serde(rename = "albumImportIncomplete")]
    AlbumImportIncomplete,
    #[serde(rename = "downloadImported")]
    DownloadImported,
    #[serde(rename = "trackFileRetagged")]
    TrackFileRetagged,
    #[serde(rename = "downloadIgnored")]
    DownloadIgnored,

}

impl std::fmt::Display for EntityHistoryEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "unknown"),
            Self::Grabbed => write!(f, "grabbed"),
            Self::ArtistFolderImported => write!(f, "artistFolderImported"),
            Self::TrackFileImported => write!(f, "trackFileImported"),
            Self::DownloadFailed => write!(f, "downloadFailed"),
            Self::TrackFileDeleted => write!(f, "trackFileDeleted"),
            Self::TrackFileRenamed => write!(f, "trackFileRenamed"),
            Self::AlbumImportIncomplete => write!(f, "albumImportIncomplete"),
            Self::DownloadImported => write!(f, "downloadImported"),
            Self::TrackFileRetagged => write!(f, "trackFileRetagged"),
            Self::DownloadIgnored => write!(f, "downloadIgnored"),
        }
    }
}

impl Default for EntityHistoryEventType {
    fn default() -> EntityHistoryEventType {
        Self::Unknown
    }
}

