/*
 * Lidarr
 *
 * Lidarr API docs
 *
 * The version of the OpenAPI document: v2.13.3.4711
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataProviderConfigResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "metadataSource", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata_source: Option<Option<String>>,
    #[serde(rename = "writeAudioTags", skip_serializing_if = "Option::is_none")]
    pub write_audio_tags: Option<models::WriteAudioTagsType>,
    #[serde(rename = "scrubAudioTags", skip_serializing_if = "Option::is_none")]
    pub scrub_audio_tags: Option<bool>,
    #[serde(rename = "embedCoverArt", skip_serializing_if = "Option::is_none")]
    pub embed_cover_art: Option<bool>,
}

impl MetadataProviderConfigResource {
    pub fn new() -> MetadataProviderConfigResource {
        MetadataProviderConfigResource {
            id: None,
            metadata_source: None,
            write_audio_tags: None,
            scrub_audio_tags: None,
            embed_cover_art: None,
        }
    }
}

